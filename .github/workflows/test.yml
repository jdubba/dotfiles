name: Test Dotfiles

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            version: "20.04"
            dockerfile: Dockerfile.ubuntu
          - os: ubuntu
            version: "22.04"
            dockerfile: Dockerfile.ubuntu
          - os: fedora
            version: "42"
            dockerfile: Dockerfile.fedora
          - os: arch
            version: "latest"
            dockerfile: Dockerfile.arch
          - os: opensuse
            version: "leap-15.5"
            dockerfile: Dockerfile.opensuse

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      run: |
        docker build \
          -t dotfiles-test-${{ matrix.os }}:${{ matrix.version }} \
          -f tests/docker/${{ matrix.dockerfile }} \
          tests/docker/

    - name: Run unit tests
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/dotfiles \
          -w /dotfiles \
          dotfiles-test-${{ matrix.os }}:${{ matrix.version }} \
          bats tests/unit/

    - name: Run integration tests
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/dotfiles \
          -w /dotfiles \
          dotfiles-test-${{ matrix.os }}:${{ matrix.version }} \
          bats tests/integration/

    - name: Run distribution-specific tests
      run: |
        if [ -f "tests/distributions/${{ matrix.os }}.bats" ]; then
          docker run --rm \
            -v ${{ github.workspace }}:/dotfiles \
            -w /dotfiles \
            dotfiles-test-${{ matrix.os }}:${{ matrix.version }} \
            bats tests/distributions/${{ matrix.os }}.bats
        else
          echo "No distribution-specific tests for ${{ matrix.os }}"
        fi

    - name: Test installation (dry run)
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/dotfiles \
          -w /dotfiles \
          dotfiles-test-${{ matrix.os }}:${{ matrix.version }} \
          bash -c "
            chmod +x install-scripts/*.sh &&
            chmod +x install.sh &&
            ./install-scripts/install-packages.sh --dry-run
          "

  lint:
    name: Lint Shell Scripts
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install ShellCheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck

    - name: Run ShellCheck
      run: |
        find . -name "*.sh" -type f | xargs shellcheck -e SC1091

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: always()
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "✅ **Distribution Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Distribution Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.lint.result }}" = "success" ]; then
          echo "✅ **Shell Linting**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Shell Linting**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security.result }}" = "success" ]; then
          echo "✅ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Security Scan**: Failed" >> $GITHUB_STEP_SUMMARY
        fi