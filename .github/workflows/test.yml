name: Test Dotfiles

on:
  push:
    branches: [ main, master, feature/* ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install ShellCheck
      run: sudo apt update && sudo apt install -y shellcheck
    
    - name: Run linting
      run: |
        # Only lint shell scripts, not BATS tests which require special handling
        echo "Linting shell scripts..."
        
        # Find shell scripts (excluding .bats files)
        SHELL_SCRIPTS=$(find . -type f -name "*.sh" | grep -v "tests/lib" | grep -v "^./.git/")
        
        # Find install script separately
        INSTALL_SCRIPT=$(find . -type f -name "install" -not -path "*/\.*")
        
        # Combine and lint
        echo "$SHELL_SCRIPTS $INSTALL_SCRIPT" | xargs shellcheck -x
        
        # Check bash configuration files
        if [ -f "config/.bashrc" ]; then
          echo "Checking config/.bashrc..."
          shellcheck -x config/.bashrc || true
        fi
        
        if [ -f "config/.bash_aliases" ]; then
          echo "Checking config/.bash_aliases..."
          shellcheck -x config/.bash_aliases || true
        fi
        
        if [ -f "config/.profile" ]; then
          echo "Checking config/.profile..."
          shellcheck -x config/.profile || true
        fi
        
        echo "Linting completed successfully!"

  test:
    name: Test
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y stow
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install stow bats-core bats-support bats-assert
    
    - name: Debug environment
      run: |
        echo "OS: ${{ matrix.os }}"
        echo "Current directory: $(pwd)"
        echo "Git version: $(git --version)"
        ls -la
        if command -v bats &>/dev/null; then
          echo "System bats found: $(which bats)"
          bats --version
        else
          echo "System bats not found"
        fi
        
        # Check for Homebrew bats libraries on macOS
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          echo "Checking for Homebrew bats libraries:"
          ls -la /opt/homebrew/lib/bats-* || echo "No Homebrew bats libraries found"
        fi
    
    - name: Install BATS
      run: |
        chmod +x tests/install_bats.sh
        ./tests/install_bats.sh
        
        # Show the bats installation
        echo "BATS installation:"
        ls -la tests/lib/bats-core || echo "bats-core not found"
        ls -la tests/lib/bats-support || echo "bats-support not found"
        ls -la tests/lib/bats-assert || echo "bats-assert not found"
        
        if [ -d "tests/lib/bats-core/bin" ]; then
          echo "BATS bin directory:"
          ls -la tests/lib/bats-core/bin
        fi
    
    - name: Run tests
      run: |
        chmod +x test.sh
        ./test.sh
    
    - name: Test actual installation
      run: |
        # Create a test user home directory
        mkdir -p /tmp/home
        export HOME=/tmp/home
        
        # Run the install script
        ./install.sh
        
        # Verify symlinks were created
        echo "Checking created symlinks:"
        ls -la /tmp/home
        
        # Check that config directory was linked if it exists
        if [ -d "config/.config" ]; then
          echo "Checking .config directory:"
          ls -la /tmp/home/.config
        fi
        
        # Verify a few specific files
        for file in .bashrc .bash_aliases .profile .gitconfig; do
          if [ -f "config/$file" ]; then
            echo "Checking $file..."
            test -L "/tmp/home/$file" || (echo "$file symlink not created" && exit 1)
            echo "$file correctly linked"
          fi
        done
